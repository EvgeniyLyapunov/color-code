{"version":3,"file":"static/js/97.53e1b003.chunk.js","mappings":"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","sources":["modules/intro-view/util/getRandomColor.js","modules/intro-view/components/colorPartOfSecretCode/ColorPartOfSecretCode.js","modules/intro-view/components/intro/Intro.js","modules/intro-view/IntroView.js"],"sourcesContent":["function setRandomColor() {\n  const max = 5;\n  const min = 1;\n  let rnd = Math.floor(Math.random() * (max - min + 1)) + min;\n\n  switch(rnd) {\n    case 1:\n      return '#ff006e';\n    case 2:\n      return '#ffed66';\n    case 3:\n      return '#3a86ff';\n    case 4:\n      return '#16db65';\n    case 5:\n      return '#d09259';\n    default:\n      return 'white';\n  }\n}\n\nexport default setRandomColor;","import { useState, useEffect, useMemo } from \"react\";\n\nimport getRandomColor from '../../util/getRandomColor';\n\nimport './color-part-of-secret-code.scss';\n\nconst ColorPartOfSecretCode = ({showTime, introEnd}) => {\n  const [bgColor, setBgColor] = useState('white');\n\n  useEffect(() => {\n    for(let i = 1; i <= 15; i++) {\n      setTimeout(() => {\n        const color = getRandomColor();\n        if(i === 15) {\n          setBgColor('end');\n        } else {\n          setBgColor(color);\n        }\n      }, i * 100 + showTime);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const styleChanged = useMemo(() => {\n    return {\n      backgroundColor: `${bgColor}`\n    }\n    // eslint-disable-next-line\n  }, [bgColor]);\n\n  const styleEnd = useMemo(() => {\n    return {\n      backgroundColor: '#ffed66',\n      border: 'none',\n      boxShadow: '-5px 5px 20px #ffed66, -5px -5px 20px #ffed66, 5px -5px 20px #ffed66, 5px 5px 20px #ffed66, -10px -10px 30px #ffed66, 10px 10px 30px #ffed66, -10px 10px 30px #ffed66, 10px -10px 30px #ffed66',\n    }\n    // eslint-disable-next-line\n  }, [bgColor]);\n\n  let style = bgColor === 'end' ? styleEnd : styleChanged;\n\n  // если prop introEnd не null и перебор цветов закончен\n  // запускается функция introEnd, запускающая эффект плавного исчезновения компонента\n  if(introEnd && bgColor === 'end') {\n    setTimeout(() => {\n    introEnd();\n    }, 150);\n  }\n\n  return (\n    <div className=\"square\" style={style}>\n\n    </div>\n  )\n}\n\nexport default ColorPartOfSecretCode;","import { useCallback, useState } from 'react';\nimport classNames from 'classnames';\n\nimport ColorPartOfSecretCode from '../colorPartOfSecretCode/ColorPartOfSecretCode';\n\nimport './intro.scss';\n\nconst Intro = ({colorBg}) => {\n  // состояние introOpacity отвечает за включение плавного исчезновения визуализации генерации секретного кода\n  const [introOpacity, setIntroOpasity] = useState(false);\n  // состояние introNone убирает элемент из потока документа, добавляя св-во display: none\n  const [introNone, setIntroNone] = useState(false);\n\n  // функция меняет состояние introOpacity и introNone\n  // запускается в дочернем компоненте\n  const introEnd = useCallback(() => {\n    setTimeout(() => {\n      setIntroNone(!introNone);\n      colorBg();\n    }, 1500);\n    setIntroOpasity(!introOpacity);\n    // eslint-disable-next-line\n  }, [])\n\n  // управление плавным исчезновением компонента через css классы\n  const classNameIntro = classNames({\n    intro: true,\n    'intro-opacity': introOpacity,\n    'intro-none': introNone\n  });\n\n  // базовое время появления каждого элемента кода\n  const showTime = 500;\n\n  return (\n    <div className= {classNameIntro}>\n      <ColorPartOfSecretCode showTime={showTime * 0}/>\n      <ColorPartOfSecretCode showTime={showTime * 1}/>\n      <ColorPartOfSecretCode showTime={showTime * 2}/>\n      <ColorPartOfSecretCode showTime={showTime * 3} introEnd={introEnd}/>\n    </div>\n  )\n}\n\nexport default Intro;","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport classNames from 'classnames';\n\nimport Intro from './components/intro/Intro';\nimport { gameStage } from '../../redux/slices/globalSlice';\n\nimport './intro-view.scss';\n\nconst IntroView = () => {\n  // состояние отвечает за цвет bg, изначально чб\n  const [colorBgGame, setColorBgGame] = useState(false);\n  const bgGame = useSelector((state) => state.globalReducer.bgGame);\n  const dispatch = useDispatch();\n\n  // функция меняет состояние цвета bg с чб на цвет\n  // передаётся в компонент Intro и вызывается там\n  const colorBg = () => {\n    setColorBgGame(!colorBgGame);\n    setTimeout(() => {\n      dispatch(gameStage('game'));\n    }, 550);\n  };\n\n  // установка css классов для управления картинкой bg\n  const introViewClass = classNames({\n    'intro-view': true,\n    [`intro-${bgGame}`]: true,\n    'intro-view_bg-color': colorBgGame,\n  });\n\n  return (\n    <div className={introViewClass}>\n      <Intro colorBg={colorBg} />\n    </div>\n  );\n};\n\nexport default IntroView;\n"],"names":["Math","floor","random","_ref","showTime","introEnd","_useState","useState","_useState2","_slicedToArray","bgColor","setBgColor","useEffect","_loop","i","setTimeout","color","getRandomColor","styleChanged","useMemo","backgroundColor","concat","styleEnd","border","boxShadow","style","_jsx","className","colorBg","introOpacity","setIntroOpasity","_useState3","_useState4","introNone","setIntroNone","useCallback","classNameIntro","classNames","intro","_jsxs","children","ColorPartOfSecretCode","_classNames","colorBgGame","setColorBgGame","bgGame","useSelector","state","globalReducer","dispatch","useDispatch","introViewClass","_defineProperty","Intro","gameStage"],"sourceRoot":""}